// Importing the Category model and utility functions
const { default: mongoose } = require("mongoose");
const CartItem = require("../Models/CartItem");
const Order = require("../Models/Order");
const Category = require("../Models/Order");
const Product = require("../Models/Product");
const { createError, successMessage } = require("../utils/ResponseMessage");
const { v4: uuidv4 } = require("uuid");
// Function to handle category creation
const addItemToCartController = async (req, res) => {
  const { order_no, item, qty, price, shipping_fee,shipping } = req.body;

  try {
    // Validate input
    if (!item || !item._id) {
      return createError(res, 400, "Invalid item data.");
    }

    // Validate product ID
    if (!mongoose.Types.ObjectId.isValid(item._id)) {
      return createError(res, 400, "Invalid product ID format.");
    }

    // Check if the product exists in the database
    const product = await Product.findById(item._id);
    if (!product) {
      return createError(res, 404, `Product with ID ${item._id} not found.`);
    }

    const u_uuid = order_no ? order_no : uuidv4();

    // Check if the customer already has a cart
    let order = await Order.findOne({ order_no: u_uuid }).populate("items");
    console.log(order);

    console.log(order);

    const createNewCartItem = async () => {
      const cartItem = new CartItem({
        itemId: item._id,
        name: item.name,
        image: item.images[0],
        qty,
        price,
        cost: item.cost,
        total: Number(qty) * Number(price),
      });
      await cartItem.save();
      return cartItem;
    };

    if (order) {
      // Check if the item already exists in the cart
      const itemExists = order.items.some(
        (cartItem) => cartItem.itemId.toString() === product._id.toString()
      );

      if (itemExists) {
        return createError(res, 200, "Item already in cart.");
      }

      // Add new item to existing cart
      const newCartItem = await createNewCartItem();
      order.items.push(newCartItem);
      await order.save();

      return successMessage(res, order, "Item successfully added to the cart.");
    } else {
      // Create a new order if the customer does not have one
      const newCartItem = await createNewCartItem();
      const newOrder = new Order({
        order_no: u_uuid,
        items: [newCartItem],
        status: 1,
        shipping_fee,
        shipping,
        // order_no will be auto-generated by the pre-save middleware
      });

      await newOrder.save();
      return successMessage(
        res,
        newOrder,
        "New cart created, and item added successfully."
      );
    }
  } catch (error) {
    // Handle unexpected errors
    console.error("Error adding item to cart:", error);
    return createError(res, 500, "Internal Server Error.");
  }
};

const addDetailsToOrder = async (req, res) => {
  const {
    order_no,
    customer,
    city,
    address,
    contact_no,
    shipping,
    shipping_fee,
    
  } = req.body;
  const updateOrder = await Order.findOneAndUpdate(
    { order_no: order_no },
    { customer, city, address, contact_no, shipping_fee: shipping_fee, status: 2, order_date: new Date() },
    { new: true }
  );
  return successMessage(res, updateOrder, "Order details updated successfully");
};

const addAddressToOrder = async (req, res) => {
  const { id } = req.params;
  const { address, shipping_fee } = req.body;

  try {
    // Validate input
    if (!address) {
      return createError(res, 400, "Address is required");
    }

    // Find the order by _id and update the address
    const updateOrder = await Order.findByIdAndUpdate(
      id, // Match _id with the provided id
      { address, shipping_fee }, // Update the address field
      { new: true } // Return the updated document
    );

    // Check if the order was found and updated
    if (!updateOrder) {
      return createError(res, 404, "Order not found");
    }

    return successMessage(
      res,
      updateOrder,
      "Order-Address updated successfully"
    );
  } catch (error) {
    console.error("Error updating order:", error);
    return createError(res, 500, error.message);
  }
};
const addShippingToOrder = async (req, res) => {
  const { id } = req.params;
  const { shipping, shipping_fee } = req.body;

  try {
    // Validate input
    if (!shipping) {
      return createError(res, 400, "Shipping is required");
    }

    const currentDate = new Date();

    // Get the date 7 days from now
    const futureDate = new Date();
    futureDate.setDate(currentDate.getDate() + 7);

    const currentDateTimestamp = Math.floor(currentDate / 1000);
    const deliveryDateTimestamp = Math.floor(futureDate / 1000);

    const cOrder = await Order.findById(id).populate("items");

    const total =
      cOrder && Array.isArray(cOrder.items) && cOrder.items.length !== 0
        ? cOrder.items
            .reduce((total, item) => total + item.price * item.qty, 0)
            .toFixed(2)
        : 0;
    console.log(cOrder);
    console.log(total);

    // Find the order by _id and update the address
    const updateOrder = await Order.findByIdAndUpdate(
      id, // Match _id with the provided id
      {
        total: Number(total),
        shipping,
        shipping_fee,
        status: 2,
        order_date: currentDateTimestamp,
        delivery_date: deliveryDateTimestamp,
        // order_no will be auto-generated by the pre-save middleware for new orders
      }, // Update the address field
      { new: true } // Return the updated document
    );

    // Check if the order was found and updated
    if (!updateOrder) {
      return createError(res, 404, "Order not found");
    }

    return successMessage(
      res,
      updateOrder,
      "Order-Shiiping updated successfully"
    );
  } catch (error) {
    console.error("Error updating order:", error);
    return createError(res, 500, error.message);
  }
};

const GetUserCart = async (req, res) => {
  const { order_no } = req.params;
  try {
    const cartOrder = await Order.findOne({
      order_no: order_no,
    }).populate("items");

    return successMessage(res, cartOrder, "Cart retrieved successfully.");
  } catch (error) {
    return createError(res, 400, error.message);
  }
};
const GetAllOrder = async (req, res) => {
  try {
    const cartOrder = await Order.find({})
      .populate("items")
      .sort({ order_date: -1 });
    return successMessage(res, cartOrder, "Order retrieved successfully.");
  } catch (error) {
    return createError(res, 400, error.message);
  }
};
// Function to update a category by its ID
const updateStatusToPlaced = async (req, res) => {
  try {
    // Extract the category ID from the request parameters
    const { id } = req.params;
    const { address, shipping, shipping_fee } = req.body;
    // Update the category with the provided ID
    const category = await Order.findByIdAndUpdate(
      id,
      {
        address,
        shipping,
        shipping_fee,
      },
      {
        new: true,
      }
    );
    // Check if the category was found and updated
    if (!category) {
      return createError(res, 404, "Category not found");
    }
    return successMessage(res, category, "Category updated successfully!");
  } catch (error) {
    return createError(res, 400, error.message);
  }
};

const updateQtyOfItems = async (req, res) => {
  const { order_no } = req.params; // Order ID
  const { itemId, qty, type } = req.body; // 1 type: Increase, 2 type: Decrease qty

  try {
    // Find the cart item by ID
    const cartItem = await CartItem.findById(itemId);

    if (!cartItem) {
      return createError(res, 404, "Cart item not found.");
    }

    // Update the quantity based on the type
    if (type === 3) {
      // Increase quantity
      cartItem.qty = qty;
    } else if (type === 1) {
      // Increase quantity
      cartItem.qty += qty;
    } else if (type === 2) {
      // Decrease quantity
      cartItem.qty -= qty;

      // If quantity drops to zero, delete the cart item and update the Order
      if (cartItem.qty <= 0) {
        await CartItem.findByIdAndDelete(itemId); // Delete the cart item

        // Remove the item from the Order model's items array
        const order = await Order.findOne({ order_no: order_no });
        if (order) {
          order.items = order.items.filter(
            (item) => item.itemId.toString() !== itemId.toString()
          );
          await order.save();
        }

        return successMessage(
          res,
          order,
          "Cart item removed and order updated successfully."
        );
      }
    } else {
      return createError(res, 400, "Invalid type value.");
    }

    // Save the updated cart item
    await cartItem.save();

    return successMessage(
      res,
      cartItem,
      "Cart item quantity updated successfully."
    );
  } catch (error) {
    console.error("Error updating cart item quantity:", error);
    return createError(res, 500, "Internal Server Error.");
  }
};
const deleteOrder = async (req, res) => {
  const { id: orderId } = req.params; // Order ID
  try {
    const order = await Order.findByIdAndDelete(orderId);
    return successMessage(res, order, "Order Deleted successfully.");
  } catch (error) {
    console.error("Error deleting order:", error);
    return createError(res, 500, "Internal Server Error.");
  }
};
const updateOrderStatus = async (req, res) => {
  const { id: orderId } = req.params; // Order ID
  const { status } = req.body; // 1 type: Increase, 2 type: Decrease qty
  console.log(status, orderId);

  try {
    // Find the cart item by ID

    // Remove the item from the Order model's items array
    const order = await Order.findByIdAndUpdate(
      orderId,
      { status: status },
      { new: true }
    );

    return successMessage(res, order, "Order status updated successfully.");

    s;
  } catch (error) {
    console.error("Error updating Order Status:", error);
    return createError(res, 500, "Internal Server Error.");
  }
};

const removeItemFromCart = async (req, res) => {
  const { id } = req.params;
  const { itemId } = req.body;
  console.log(itemId);

  try {
    const cartItem = await CartItem.findByIdAndDelete(itemId);
    const order = await Order.findById(id);
    order.items = order.items.filter((item) => item.itemId !== itemId);
    await order.save();
    return successMessage(res, cartItem, "Item removed successfully!");
  } catch (error) {
    return createError(res, 400, error.message);
  }
};

const GetCardData = async (req, res) => {
  try {
    const allOrder = await Order.find({}).populate("items");

    const totalSalesCount = allOrder.reduce((total, order) => {
      const orderTotal = order.items.reduce((sum, oi) => {
        return sum + Number(oi.price) * Number(oi.qty);
      }, 0);
      return total + orderTotal;
    }, 0);

    const totalRevenueCount = allOrder.reduce((total, order) => {
      const orderTotal = order.items.reduce((sum, oi) => {
        return (
          sum +
          Number(oi.price) * Number(oi.qty) -
          Number(oi.cost) * Number(oi.qty)
        );
      }, 0);
      return total + orderTotal;
    }, 0);

    const resPayload = {
      allOrder: allOrder.length,
      totalSale: totalSalesCount,
      totalRevenue: totalRevenueCount,
    };

    return successMessage(res, resPayload, "Card Data retrieved successfully.");
  } catch (error) {
    return createError(res, 400, error.message);
  }
};

// Function to ensure all existing orders have order numbers
const ensureOrderNumbers = async (req, res) => {
  try {
    const updatedCount = await Order.ensureOrderNumbers();
    return successMessage(
      res,
      { updatedCount },
      `Successfully ensured order numbers for ${updatedCount} orders.`
    );
  } catch (error) {
    console.error("Error ensuring order numbers:", error);
    return createError(res, 500, "Internal Server Error.");
  }
};

// Exporting the controller functions
module.exports = {
  addItemToCartController,
  updateStatusToPlaced,
  updateQtyOfItems,
  GetUserCart,
  removeItemFromCart,
  addAddressToOrder,
  addShippingToOrder,
  GetAllOrder,
  updateOrderStatus,
  deleteOrder,
  GetCardData,
  ensureOrderNumbers,
  addDetailsToOrder
};
